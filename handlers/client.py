from email import message
from typing import Text
from aiogram import types, Dispatcher
from create_bot import bot
from keyboards import keyboard_client, keyboard_client_catalog
from keyboards import menu_start_state_init, menu_state_with_back, menu_start_state_with_description
from aiogram.dispatcher.filters import Text
from data_base import sqlite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# basket shop
class basket:
    def __init__(self):
        # "name" : count
        self.content = {"chemical" : {}, "devices" : {}, "fertilizers" : {}, "seeds" : {}}

    def add(self, name_database, name_item):
        if self.content[name_database].get(name_item) is None:
            self.content[name_database][name_item] = 1
        else:
            self.content[name_database][name_item] += 1

    def remove(self, name_database, name_item):
        if self.content[name_database].get(name_item) is None:
            self.content[name_database][name_item] = 0
        elif self.content[name_database][name_item] > 0:
            self.content[name_database][name_item] -= 1


id = 12
client = {}

# func start working
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç AgrosegmentBot!</b>', parse_mode='html', reply_markup=keyboard_client)
    if(message.from_user.id != message.chat.id):
        await message.delete()

# func getting contact details
async def get_contact(message: types.Message):
    await bot.send_message(message.from_user.id, '<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ø–Ω-—Å–± <u>—Å 7:00 –¥–æ 18:00</u></b>\n<b>–ê–¥—Ä–µ—Å: <u>—É–ª. –ê–≤–∏–ª–æ–≤–∞</u></b>', parse_mode='html')
    if(message.from_user.id != message.chat.id):
        await message.delete()

# func getting contact details
async def get_inforamation(message: types.Message):
    await bot.send_message(message.from_user.id, '<b>. . . –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò . . .</b>', parse_mode='html')
    if(message.from_user.id != message.chat.id):
        await message.delete()

# func getting catalog
async def get_catalog(message: types.Message):
    client[message.from_user.id] = basket()
    await bot.send_message(message.from_user.id, '<b><u>üõé–í–´–ë–ï–†–ò–¢–ï –†–ê–ó–î–ï–õüõé</u></b>', parse_mode='html', reply_markup=keyboard_client_catalog)
    if(message.from_user.id != message.chat.id):
        await message.delete()

async def get_menu(callback: types.CallbackQuery):
    read = await sqlite_db.sql_read(callback.data.replace("Client catalog ", ""))
    for item in read:
        # –¢—É—Ç –¥–æ–±–∞–≤—å –∫–Ω–æ–ø–Ω—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
        await callback.message.answer_photo(item[0], f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item[1]}\n–¶–µ–Ω–∞: {item[3]}', reply_markup=await menu_start_state_init(callback, item))
    await callback.answer()

async def get_description(callback: types.CallbackQuery):
    await callback.message.edit_caption(f'–û–ø–∏—Å–∞–Ω–∏–µ: {callback.data.replace("description ", "")}',
    reply_markup=await menu_state_with_back(callback))

async def get_reverse(callback: types.CallbackQuery):
    await callback.message.edit_caption(f'{callback.data.replace("reverse ", "")}', parse_mode='html',
    reply_markup=await menu_start_state_with_description(callback))

async def add_basket(callback: types.CallbackQuery):
    split_data = callback.data.split()
    client[callback.from_user.id].add(split_data[3], split_data[4])
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f'remove from basket {split_data[3]} {split_data[4]}')))

async def remove_basket(callback: types.CallbackQuery):
    split_data = callback.data.split()
    client[callback.from_user.id].remove(split_data[3], split_data[4])
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data='del from basket')))


def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start', 'help'])
    dp.register_message_handler(get_contact, Text(equals='‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è', ignore_case=True))
    dp.register_message_handler(get_inforamation, Text(equals='üîé –û –∫–æ–º–ø–∞–Ω–∏–∏ üîç', ignore_case=True))
    dp.register_message_handler(get_catalog, Text(equals='üóÇ –ö–∞—Ç–∞–ª–æ–≥ üóÇ', ignore_case=True))
    dp.register_callback_query_handler(get_menu, lambda x: x.data and x.data.startswith('Client catalog '))
    dp.register_callback_query_handler(get_description, lambda x: x.data and x.data.startswith('description '))
    dp.register_callback_query_handler(get_reverse, lambda x: x.data and x.data.startswith('reverse '))
    dp.register_callback_query_handler(add_basket, lambda x: x.data and x.data.startswith('add in basket '))
